import { ethers } from "hardhat";
import { BigNumber, Wallet } from "ethers";
import { deployDiamond } from "../scripts/deploy";
const {
    getSelectors,
    FacetCutAction,
    removeSelectors,
    findAddressPositionInFacets
  } = require('../scripts/libraries/diamond.js')

const { assert } = require('chai')

export const BASE_TEN = 10

export function getBigNumber(amount: number, decimals = 18) {
    return BigNumber.from(amount).mul(BigNumber.from(BASE_TEN).pow(decimals))
}

describe('ProjectTest', async function () {
    let diamondAddress : any
    let diamondCutFacet : any
    let diamondLoupeFacet : any
    let projectRegistryFacet : any
    let stRegistryFacet : any
    let tx
    let receipt
    let result
    const addresses: any[] = []
  
    before(async function () {
      diamondAddress = await deployDiamond()
      diamondCutFacet = await ethers.getContractAt('DiamondCutFacet', diamondAddress)
      diamondLoupeFacet = await ethers.getContractAt('DiamondLoupeFacet', diamondAddress)
      projectRegistryFacet = await ethers.getContractAt('ProjectRegistryFacet', diamondAddress)
      stRegistryFacet = await ethers.getContractAt('STRegistryFacet', diamondAddress)
    })

    it('Create new Project', async () => {
        await projectRegistryFacet.createProject("0x5265616C20457374617465", "0x5030303030303031000000000000000000000000000000000000000000000000", "0x5030303030303031000000000000000000000000000000000000000000000000001842726f6f6b6c796e20427269646765204e657720596f726b002042726f6f6b6c796e20427269646765204e657720596f726b2050726f6a656374002d68747470733a2f2f656e2e77696b6970656469612e6f72672f77696b692f42726f6f6b6c796e5f42726964676500010000010200200000000000000000000000000000000000000000000000000000000062bc9a280020000000000000000000000000000000000000000000000000000000006335e4280001030020555341000000000000000000000000000000000000000000000000000000000000204e657720596f726b00000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000048c273950000020000000000000000000000000000000000000000000000000000003a3529440000020000000000000000000000000000000000000000000000000000000000000006400200000000000000000000000000000000000000000000000000000000000000001002000000000000000000000000000000000000000000000000000000000000003e800200000000000000000000000000000000000000000000000000000000000000050000103002056303337383438363338363233353437323334373233343533323533383632380020000000000000000000000000000000000000000000000000000009184e72a000002000000000000000000000000000000000000000000000000000000000651717a8")
        console.log("Project contract address", await projectRegistryFacet.getProjectContractAddress("0x5265616C20457374617465", "0x5030303030303031000000000000000000000000000000000000000000000000"))
        console.log("Project data", await projectRegistryFacet.getProjectData("0x5265616C20457374617465", "0x5030303030303031000000000000000000000000000000000000000000000000"))
        stRegistryFacet.createSTToken("0x5265616C20457374617465", "0x5030303030303031000000000000000000000000000000000000000000000000", "0x001253656375726974696573204578616D706C65000453454345000112000101002814dc79964da2c08b23698b3d3cc7ca32193d995523618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f008047616D6D610000000000000000000000000000000000000000000000000000005374656C6C6100000000000000000000000000000000000000000000000000004C756E6100000000000000000000000000000000000000000000000000000000506F6C6172697300000000000000000000000000000000000000000000000000")
        console.log("Latest Impl Contract address", await stRegistryFacet.getLatestLogicalContractAddress("0x5631000000000000000000000000000000000000000000000000000000000000"))
        console.log("Latest Impl Contract address", await stRegistryFacet.getLogicalContractAddress("0x5631000000000000000000000000000000000000000000000000000000000000", 0))
        const stoTokenAddress = await stRegistryFacet.getSTTokenAddress("0x5265616C20457374617465", "0x5030303030303031000000000000000000000000000000000000000000000000")
        const stoToken = await ethers.getContractAt("IERC1400", stoTokenAddress);
        console.log("Default partitions", await stoToken.getDefaultPartitions());
    })
})